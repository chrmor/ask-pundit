/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['AuthenticatedRequester.js']) {
  _$jscoverage['AuthenticatedRequester.js'] = [];
  _$jscoverage['AuthenticatedRequester.js'][10] = 0;
  _$jscoverage['AuthenticatedRequester.js'][34] = 0;
  _$jscoverage['AuthenticatedRequester.js'][66] = 0;
  _$jscoverage['AuthenticatedRequester.js'][68] = 0;
  _$jscoverage['AuthenticatedRequester.js'][84] = 0;
  _$jscoverage['AuthenticatedRequester.js'][86] = 0;
  _$jscoverage['AuthenticatedRequester.js'][91] = 0;
  _$jscoverage['AuthenticatedRequester.js'][92] = 0;
  _$jscoverage['AuthenticatedRequester.js'][93] = 0;
  _$jscoverage['AuthenticatedRequester.js'][109] = 0;
  _$jscoverage['AuthenticatedRequester.js'][115] = 0;
  _$jscoverage['AuthenticatedRequester.js'][116] = 0;
  _$jscoverage['AuthenticatedRequester.js'][117] = 0;
  _$jscoverage['AuthenticatedRequester.js'][118] = 0;
  _$jscoverage['AuthenticatedRequester.js'][129] = 0;
  _$jscoverage['AuthenticatedRequester.js'][130] = 0;
  _$jscoverage['AuthenticatedRequester.js'][134] = 0;
  _$jscoverage['AuthenticatedRequester.js'][139] = 0;
  _$jscoverage['AuthenticatedRequester.js'][140] = 0;
  _$jscoverage['AuthenticatedRequester.js'][143] = 0;
  _$jscoverage['AuthenticatedRequester.js'][147] = 0;
  _$jscoverage['AuthenticatedRequester.js'][148] = 0;
  _$jscoverage['AuthenticatedRequester.js'][151] = 0;
  _$jscoverage['AuthenticatedRequester.js'][155] = 0;
  _$jscoverage['AuthenticatedRequester.js'][167] = 0;
  _$jscoverage['AuthenticatedRequester.js'][177] = 0;
  _$jscoverage['AuthenticatedRequester.js'][187] = 0;
  _$jscoverage['AuthenticatedRequester.js'][191] = 0;
  _$jscoverage['AuthenticatedRequester.js'][193] = 0;
  _$jscoverage['AuthenticatedRequester.js'][195] = 0;
  _$jscoverage['AuthenticatedRequester.js'][196] = 0;
  _$jscoverage['AuthenticatedRequester.js'][197] = 0;
  _$jscoverage['AuthenticatedRequester.js'][200] = 0;
  _$jscoverage['AuthenticatedRequester.js'][201] = 0;
  _$jscoverage['AuthenticatedRequester.js'][202] = 0;
  _$jscoverage['AuthenticatedRequester.js'][205] = 0;
  _$jscoverage['AuthenticatedRequester.js'][206] = 0;
  _$jscoverage['AuthenticatedRequester.js'][207] = 0;
  _$jscoverage['AuthenticatedRequester.js'][208] = 0;
  _$jscoverage['AuthenticatedRequester.js'][212] = 0;
  _$jscoverage['AuthenticatedRequester.js'][213] = 0;
  _$jscoverage['AuthenticatedRequester.js'][219] = 0;
  _$jscoverage['AuthenticatedRequester.js'][221] = 0;
  _$jscoverage['AuthenticatedRequester.js'][223] = 0;
  _$jscoverage['AuthenticatedRequester.js'][225] = 0;
  _$jscoverage['AuthenticatedRequester.js'][226] = 0;
  _$jscoverage['AuthenticatedRequester.js'][230] = 0;
  _$jscoverage['AuthenticatedRequester.js'][236] = 0;
  _$jscoverage['AuthenticatedRequester.js'][238] = 0;
  _$jscoverage['AuthenticatedRequester.js'][239] = 0;
  _$jscoverage['AuthenticatedRequester.js'][240] = 0;
  _$jscoverage['AuthenticatedRequester.js'][241] = 0;
  _$jscoverage['AuthenticatedRequester.js'][242] = 0;
  _$jscoverage['AuthenticatedRequester.js'][255] = 0;
  _$jscoverage['AuthenticatedRequester.js'][257] = 0;
  _$jscoverage['AuthenticatedRequester.js'][264] = 0;
  _$jscoverage['AuthenticatedRequester.js'][267] = 0;
  _$jscoverage['AuthenticatedRequester.js'][271] = 0;
  _$jscoverage['AuthenticatedRequester.js'][275] = 0;
  _$jscoverage['AuthenticatedRequester.js'][276] = 0;
  _$jscoverage['AuthenticatedRequester.js'][277] = 0;
  _$jscoverage['AuthenticatedRequester.js'][281] = 0;
  _$jscoverage['AuthenticatedRequester.js'][284] = 0;
  _$jscoverage['AuthenticatedRequester.js'][285] = 0;
  _$jscoverage['AuthenticatedRequester.js'][288] = 0;
  _$jscoverage['AuthenticatedRequester.js'][289] = 0;
  _$jscoverage['AuthenticatedRequester.js'][293] = 0;
  _$jscoverage['AuthenticatedRequester.js'][294] = 0;
  _$jscoverage['AuthenticatedRequester.js'][295] = 0;
  _$jscoverage['AuthenticatedRequester.js'][297] = 0;
  _$jscoverage['AuthenticatedRequester.js'][298] = 0;
  _$jscoverage['AuthenticatedRequester.js'][300] = 0;
  _$jscoverage['AuthenticatedRequester.js'][310] = 0;
  _$jscoverage['AuthenticatedRequester.js'][313] = 0;
  _$jscoverage['AuthenticatedRequester.js'][314] = 0;
  _$jscoverage['AuthenticatedRequester.js'][315] = 0;
  _$jscoverage['AuthenticatedRequester.js'][316] = 0;
  _$jscoverage['AuthenticatedRequester.js'][317] = 0;
  _$jscoverage['AuthenticatedRequester.js'][328] = 0;
  _$jscoverage['AuthenticatedRequester.js'][330] = 0;
  _$jscoverage['AuthenticatedRequester.js'][332] = 0;
  _$jscoverage['AuthenticatedRequester.js'][339] = 0;
  _$jscoverage['AuthenticatedRequester.js'][340] = 0;
  _$jscoverage['AuthenticatedRequester.js'][341] = 0;
  _$jscoverage['AuthenticatedRequester.js'][343] = 0;
  _$jscoverage['AuthenticatedRequester.js'][344] = 0;
  _$jscoverage['AuthenticatedRequester.js'][350] = 0;
  _$jscoverage['AuthenticatedRequester.js'][358] = 0;
  _$jscoverage['AuthenticatedRequester.js'][359] = 0;
  _$jscoverage['AuthenticatedRequester.js'][360] = 0;
  _$jscoverage['AuthenticatedRequester.js'][368] = 0;
  _$jscoverage['AuthenticatedRequester.js'][369] = 0;
  _$jscoverage['AuthenticatedRequester.js'][370] = 0;
  _$jscoverage['AuthenticatedRequester.js'][375] = 0;
  _$jscoverage['AuthenticatedRequester.js'][377] = 0;
  _$jscoverage['AuthenticatedRequester.js'][379] = 0;
  _$jscoverage['AuthenticatedRequester.js'][380] = 0;
  _$jscoverage['AuthenticatedRequester.js'][383] = 0;
  _$jscoverage['AuthenticatedRequester.js'][384] = 0;
  _$jscoverage['AuthenticatedRequester.js'][389] = 0;
  _$jscoverage['AuthenticatedRequester.js'][390] = 0;
  _$jscoverage['AuthenticatedRequester.js'][391] = 0;
  _$jscoverage['AuthenticatedRequester.js'][396] = 0;
  _$jscoverage['AuthenticatedRequester.js'][397] = 0;
  _$jscoverage['AuthenticatedRequester.js'][400] = 0;
  _$jscoverage['AuthenticatedRequester.js'][406] = 0;
  _$jscoverage['AuthenticatedRequester.js'][408] = 0;
  _$jscoverage['AuthenticatedRequester.js'][409] = 0;
  _$jscoverage['AuthenticatedRequester.js'][411] = 0;
  _$jscoverage['AuthenticatedRequester.js'][414] = 0;
  _$jscoverage['AuthenticatedRequester.js'][415] = 0;
  _$jscoverage['AuthenticatedRequester.js'][420] = 0;
  _$jscoverage['AuthenticatedRequester.js'][426] = 0;
  _$jscoverage['AuthenticatedRequester.js'][427] = 0;
  _$jscoverage['AuthenticatedRequester.js'][428] = 0;
  _$jscoverage['AuthenticatedRequester.js'][430] = 0;
  _$jscoverage['AuthenticatedRequester.js'][431] = 0;
  _$jscoverage['AuthenticatedRequester.js'][432] = 0;
  _$jscoverage['AuthenticatedRequester.js'][433] = 0;
  _$jscoverage['AuthenticatedRequester.js'][434] = 0;
  _$jscoverage['AuthenticatedRequester.js'][436] = 0;
  _$jscoverage['AuthenticatedRequester.js'][439] = 0;
}
_$jscoverage['AuthenticatedRequester.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * @class pundit.authenticatedRequester</span>","<span class=\"c\"> * @extends pundit.baseComponent</span>","<span class=\"c\"> * @description Provides facilities to interact with the pundit server, through</span>","<span class=\"c\"> * authenticated API Calls. The authentication is granted by an OpenID workflow,</span>","<span class=\"c\"> * initialized here and carried on by the server. When logged in, this component</span>","<span class=\"c\"> * notifies the user and executes any previously blocked request, which needed</span>","<span class=\"c\"> * authentication to work.</span>","<span class=\"c\"> */</span>","define<span class=\"k\">([</span>","        <span class=\"s\">\"dojo/on\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"dojo/_base/declare\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"dojo/parser\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"dojo/request/xhr\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"pundit/BaseComponent\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"bootstrap/Modal\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"dojo/text!pundit/tmpl/PunditLoginModalTemplate.html\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"dijit/_WidgetBase\"</span><span class=\"k\">,</span> ","        <span class=\"s\">\"dijit/_TemplatedMixin\"</span>","    <span class=\"k\">],</span> ","        ","    <span class=\"k\">function</span><span class=\"k\">(</span>","        on<span class=\"k\">,</span>","        declare<span class=\"k\">,</span> ","        parser<span class=\"k\">,</span>","        xhr<span class=\"k\">,</span>","        BaseComponent<span class=\"k\">,</span>","        BModal<span class=\"k\">,</span>","        LoginModalTemplate<span class=\"k\">,</span>","        _WidgetBase<span class=\"k\">,</span>","        _TemplatedMixin","    <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">return</span> declare<span class=\"k\">(</span><span class=\"s\">\"pundit.AuthenticatedRequester\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>BaseComponent<span class=\"k\">,</span> _WidgetBase<span class=\"k\">,</span> _TemplatedMixin<span class=\"k\">],</span> <span class=\"k\">{</span>","","    templateString<span class=\"k\">:</span> LoginModalTemplate<span class=\"k\">,</span>","    ","    <span class=\"c\">// TODO: can be removed from here and just taken from the first auth request or</span>","    <span class=\"c\">// is logged in</span>","    redirectURL<span class=\"k\">:</span> <span class=\"s\">\"http://metasound.dibet.univpm.it/annotationserver/login.jsp\"</span><span class=\"k\">,</span>","    ","    _loggedIn<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    _logginInAs<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    ","    HTTP_ERROR_FORBIDDEN<span class=\"k\">:</span> <span class=\"s\">403</span><span class=\"k\">,</span>","    HTTP_CONNECTION_ERROR<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","    ","    opts<span class=\"k\">:</span> <span class=\"k\">{</span>","        loginTimerMS<span class=\"k\">:</span> <span class=\"s\">500</span><span class=\"k\">,</span>","        loginAutomaticHideMS<span class=\"k\">:</span> <span class=\"s\">2000</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    blockedRequests<span class=\"k\">:</span> <span class=\"k\">[],</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">    * Initializes the component</span>","<span class=\"c\">    * @method constructor</span>","<span class=\"c\">    * @param options {object}</span>","<span class=\"c\">    * @param options.debug {boolean} wether or not to activate debug mode for this component</span>","<span class=\"c\">    * @param options.loginTimerMS {number, milliseconds} Polling interval to check if the user</span>","<span class=\"c\">    * completed the login workflow in the external OpenID window</span>","<span class=\"c\">    * @param options.loginAutomaticHideMS {number, milliseconds} Time to wait before automatically</span>","<span class=\"c\">    * hide the login panel, when login has been completed.</span>","<span class=\"c\">    */</span>","    constructor<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        self<span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","        \t    ","\t    <span class=\"c\">/**</span>","<span class=\"c\">        * @event onLogin</span>","<span class=\"c\">        * @param f(data) {function} function to be called.&lt;br&gt;</span>","<span class=\"c\">        * data is the json object coming from the server on succesfull login. </span>","<span class=\"c\">        * @description Called when the user succesfully completes the OpenID </span>","<span class=\"c\">        * authentication workflow.</span>","<span class=\"c\">        */</span>","","\t    <span class=\"c\">/**</span>","<span class=\"c\">        * @event onLogout</span>","<span class=\"c\">        * @param f(data) {function} function to be called.&lt;br&gt;</span>","<span class=\"c\">        * data is the json object coming from the server on succesfull logout. </span>","<span class=\"c\">        * @description Called when the user succesfully logs out.</span>","<span class=\"c\">        */</span>","        self<span class=\"k\">.</span>createCallback<span class=\"k\">([</span><span class=\"s\">'login'</span><span class=\"k\">,</span> <span class=\"s\">'logout'</span><span class=\"k\">]);</span>","        ","        self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Authenticated requests component up and running!'</span><span class=\"k\">);</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    startup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        self<span class=\"k\">.</span>_initLoginDialog<span class=\"k\">();</span>","        self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Startup done'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">    * @method get</span>","<span class=\"c\">    * @description Performs an HTTP get through an authenticated Ajax call.</span>","<span class=\"c\">    * @param options {object} the same object one would pass to a </span>","<span class=\"c\">    * normal dojo xhr.get().</span>","<span class=\"c\">    */</span>","    <span class=\"c\">/*</span>","<span class=\"c\">    xGet: function(url, callParams) {</span>","<span class=\"c\">        return xhr.get(url, this._setWrappingCallParams(callParams));</span>","<span class=\"c\">    },</span>","<span class=\"c\">    */</span>","    ","    get<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>url<span class=\"k\">,</span> callParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","            foo <span class=\"k\">=</span> xhr<span class=\"k\">.</span>get<span class=\"k\">(</span>url<span class=\"k\">,</span> self<span class=\"k\">.</span>_setWrappingCallParams<span class=\"k\">(</span>callParams<span class=\"k\">)),</span>","            ref <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","        <span class=\"c\">// create a new stub object, exposing a then() member, </span>","        <span class=\"c\">// who just saves the functions in the stub object itself</span>","        ref<span class=\"k\">.</span>then <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>f<span class=\"k\">,</span> e<span class=\"k\">,</span> x<span class=\"k\">)</span><span class=\"k\">{</span> ","            <span class=\"k\">this</span><span class=\"k\">.</span>orig_then <span class=\"k\">=</span> f<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>orig_error <span class=\"k\">=</span> e<span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span> ","","        ","        <span class=\"c\">// TODO: more methods to stub? </span>","        ","","        <span class=\"c\">// Specify our then on the original object: if there's </span>","        <span class=\"c\">// a login needed, show the login window, otherwise</span>","        <span class=\"c\">// we're authenticated with the server already, pass it on</span>","        <span class=\"c\">// TODO: deal with error: r, e</span>","        foo<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>r<span class=\"k\">)</span><span class=\"k\">{</span> ","            <span class=\"k\">if</span> <span class=\"k\">(</span>r <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>r<span class=\"k\">.</span>redirectTo<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Save the request, along with the object which</span>","                <span class=\"c\">// will store any future .then() calls on our</span>","                <span class=\"c\">// fake object</span>","                self<span class=\"k\">.</span>blockedRequests<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    ref<span class=\"k\">:</span> ref<span class=\"k\">,</span>","                    url<span class=\"k\">:</span> url<span class=\"k\">,</span> ","                    params<span class=\"k\">:</span> callParams","                <span class=\"k\">}</span><span class=\"k\">);</span>","                self<span class=\"k\">.</span>redirectURL <span class=\"k\">=</span> r<span class=\"k\">.</span>redirectTo<span class=\"k\">;</span>","                self<span class=\"k\">.</span>showLogin<span class=\"k\">();</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">// TODO: deal with error: r, e</span>","                ref<span class=\"k\">.</span>orig_then<span class=\"k\">(</span>r<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>r<span class=\"k\">,</span> e<span class=\"k\">,</span> x<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>ref<span class=\"k\">.</span>orig_error<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> ","                ref<span class=\"k\">.</span>orig_error<span class=\"k\">(</span>r<span class=\"k\">,</span> e<span class=\"k\">,</span> x<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">return</span> ref<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    _oldGet<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>args<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span>","            <span class=\"k\">.</span>get<span class=\"k\">(</span>args<span class=\"k\">.</span>url<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_setWrappingCallParams<span class=\"k\">(</span>args<span class=\"k\">))</span>","            <span class=\"k\">.</span>then<span class=\"k\">(</span>args<span class=\"k\">.</span>load<span class=\"k\">,</span> args<span class=\"k\">.</span>error<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","\t","    <span class=\"c\">/**</span>","<span class=\"c\">    * @method xPost</span>","<span class=\"c\">    * @description Performs an HTTP post through an authenticated Ajax call.</span>","<span class=\"c\">    * @param options {object} the same object one would pass to a </span>","<span class=\"c\">    * normal dojo xhrPost().</span>","<span class=\"c\">    */</span>","    xPost<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>callParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        dojo<span class=\"k\">.</span>xhrPost<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_setWrappingCallParams<span class=\"k\">(</span>callParams<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","\t","    <span class=\"c\">/**</span>","<span class=\"c\">    * @method xPut</span>","<span class=\"c\">    * @description Performs an HTTP put through an authenticated Ajax call.</span>","<span class=\"c\">    * @param options {object} the same object one would pass to a </span>","<span class=\"c\">    * normal dojo xhrPut().</span>","<span class=\"c\">    */</span>","    xPut<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>callParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        dojo<span class=\"k\">.</span>xhrPut<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_setWrappingCallParams<span class=\"k\">(</span>callParams<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","\t","    <span class=\"c\">/**</span>","<span class=\"c\">    * @method xDelete</span>","<span class=\"c\">    * @description Performs an HTTP delete through an authenticated Ajax call.</span>","<span class=\"c\">    * @param options {object} the same object one would pass to a </span>","<span class=\"c\">    * normal dojo xhrDelete().</span>","<span class=\"c\">    */</span>","    xDelete<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>callParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        dojo<span class=\"k\">.</span>xhrDelete<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_setWrappingCallParams<span class=\"k\">(</span>callParams<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _initLoginDialog<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        self<span class=\"k\">.</span>_setLoginState<span class=\"k\">(</span><span class=\"s\">'off'</span><span class=\"k\">);</span>","","        on<span class=\"k\">(</span>dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">'pundit-login-open-button'</span><span class=\"k\">),</span> <span class=\"s\">'click'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Opening the login dialog'</span><span class=\"k\">);</span>","            self<span class=\"k\">.</span>_openLoginPopUp<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        on<span class=\"k\">(</span>dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">'pundit-login-open-button-again'</span><span class=\"k\">),</span> <span class=\"s\">'click'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Opening the login dialog'</span><span class=\"k\">);</span>","            self<span class=\"k\">.</span>_openLoginPopUp<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        on<span class=\"k\">(</span>dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">'pundit-login-close-button'</span><span class=\"k\">),</span> <span class=\"s\">'click'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> ","            self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Closing the login dialog'</span><span class=\"k\">);</span>","            self<span class=\"k\">.</span>hideLogin<span class=\"k\">();</span>","            clearTimeout<span class=\"k\">(</span>self<span class=\"k\">.</span>loginTimer<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// Clear the _checklogin timeout if the modal gets closed</span>","        on<span class=\"k\">(</span>dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">'pundit-login-modal'</span><span class=\"k\">),</span> <span class=\"s\">'hidden'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            clearTimeout<span class=\"k\">(</span>self<span class=\"k\">.</span>loginTimer<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","\t    ","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _openLoginPopUp<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        window<span class=\"k\">.</span>open<span class=\"k\">(</span>self<span class=\"k\">.</span>redirectURL<span class=\"k\">,</span> <span class=\"s\">'loginpopup'</span><span class=\"k\">,</span> <span class=\"s\">'left=260,top=120,width=480,height=360'</span><span class=\"k\">);</span>","","        self<span class=\"k\">.</span>_setLoginState<span class=\"k\">(</span><span class=\"s\">'waiting'</span><span class=\"k\">);</span>","            ","        clearTimeout<span class=\"k\">(</span>self<span class=\"k\">.</span>loginTimer<span class=\"k\">);</span>","        self<span class=\"k\">.</span>_checkLogin<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    _setLoginState<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","        dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>removeClass<span class=\"k\">(</span><span class=\"s\">'pundit-login-state-off pundit-login-state-waiting pundit-login-state-logged'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>addClass<span class=\"k\">(</span><span class=\"s\">'pundit-login-state-'</span><span class=\"k\">+</span>s<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    _checkLogin<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        clearTimeout<span class=\"k\">(</span>self<span class=\"k\">.</span>loginTimer<span class=\"k\">);</span>","        self<span class=\"k\">.</span>loginTimer <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Not logged in.'</span><span class=\"k\">);</span>","            self<span class=\"k\">.</span>isLoggedIn<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>b<span class=\"k\">)</span> self<span class=\"k\">.</span>_checkLogin<span class=\"k\">();</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> self<span class=\"k\">.</span>opts<span class=\"k\">.</span>loginTimerMS<span class=\"k\">);</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">      * @method isLoggedIn</span>","<span class=\"c\">      * @description Checks with the server if an user is logged in. Will call</span>","<span class=\"c\">      * the given callback passing true or false</span>","<span class=\"c\">      * @param f {function} Callback to be called when the check is done</span>","<span class=\"c\">      */</span>","    isLoggedIn<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"s\">\"http://metasound.dibet.univpm.it/annotationserver/api/users/current\"</span><span class=\"k\">,</span>","            handleAs<span class=\"k\">:</span> <span class=\"s\">\"json\"</span><span class=\"k\">,</span>","            headers<span class=\"k\">:</span> <span class=\"k\">{</span>","                <span class=\"s\">\"Accept\"</span><span class=\"k\">:</span><span class=\"s\">\"application/json\"</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            load<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> self<span class=\"k\">.</span>_handleLoginLoad<span class=\"k\">(</span>data<span class=\"k\">,</span> f<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> ","            error<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> self<span class=\"k\">.</span>_handleLoginError<span class=\"k\">(</span>error<span class=\"k\">,</span> f<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        self<span class=\"k\">.</span>_oldGet<span class=\"k\">(</span>args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"c\">// isLoggedIn()</span>","","    _handleLoginError<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>error<span class=\"k\">,</span> f<span class=\"k\">)</span> <span class=\"k\">{</span>","        console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'si ma, ara che error .....'</span><span class=\"k\">,</span> error<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> f<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> error<span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _handleLoginLoad<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">,</span> f<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"c\">// If the json is not what we expect, normalize it a bit</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'undefined'</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>data<span class=\"k\">.</span>loginStatus<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span> ","            data <span class=\"k\">=</span> <span class=\"k\">{</span> loginStatus<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","        <span class=\"c\">// If we see a .loginServer field: save it as redirectURL</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>data<span class=\"k\">.</span>loginServer<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","            self<span class=\"k\">.</span>redirectURL <span class=\"k\">=</span> data<span class=\"k\">.</span>loginServer<span class=\"k\">;</span>","","        <span class=\"c\">// First time we see we're logged: fire the onLogin(), modify </span>","        <span class=\"c\">// the modal content etc. Same for logout.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">.</span>loginStatus <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>self<span class=\"k\">.</span>_loggedIn <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> self<span class=\"k\">.</span>_afterLogin<span class=\"k\">(</span>data<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> f<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span> data<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>self<span class=\"k\">.</span>_loggedIn <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> self<span class=\"k\">.</span>_afterLogout<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> f<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> data<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> ","","","    <span class=\"c\">/**</span>","<span class=\"c\">      * @method login</span>","<span class=\"c\">      * @description If the user is logged, does nothing. If not, starts the</span>","<span class=\"c\">      * login procedures, opening the modal login dialog first</span>","<span class=\"c\">      */</span>","    login<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"c\">// If we're logged in already, do nothing</span>","        self<span class=\"k\">.</span>isLoggedIn<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","            self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Login() opening the login window'</span><span class=\"k\">)</span>","            self<span class=\"k\">.</span>_setLoginState<span class=\"k\">(</span><span class=\"s\">'off'</span><span class=\"k\">);</span>","            self<span class=\"k\">.</span>showLogin<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">      * @method logout</span>","<span class=\"c\">      * @description Logs out any logged in user by calling the relative</span>","<span class=\"c\">      * server API</span>","<span class=\"c\">      */</span>","    logout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        clearTimeout<span class=\"k\">(</span>self<span class=\"k\">.</span>loginTimer<span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"s\">\"http://metasound.dibet.univpm.it/annotationserver/api/users/logout\"</span><span class=\"k\">,</span>","            handleAs<span class=\"k\">:</span> <span class=\"s\">\"json\"</span><span class=\"k\">,</span>","            headers<span class=\"k\">:</span> <span class=\"k\">{</span>","                <span class=\"s\">\"Accept\"</span><span class=\"k\">:</span><span class=\"s\">\"application/json\"</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            load<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> msg<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>data<span class=\"k\">.</span>logout<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    data<span class=\"k\">.</span>msg <span class=\"k\">=</span> <span class=\"k\">(</span>data<span class=\"k\">.</span>logout <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">'Logged out succesfully'</span> <span class=\"k\">:</span> <span class=\"s\">'You werent logged in.. and you still arent.'</span><span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> f<span class=\"k\">(</span>data<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>self<span class=\"k\">.</span>_loggedIn <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> self<span class=\"k\">.</span>_afterLogout<span class=\"k\">(</span>data<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            error<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{}</span>","        <span class=\"k\">}</span>","","        self<span class=\"k\">.</span>_oldGet<span class=\"k\">(</span>args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">      * @method showLogin</span>","<span class=\"c\">      * @description Shows the login modal dialog</span>","<span class=\"c\">      */</span>","    showLogin<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal'</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>dojo<span class=\"k\">.</span>hasClass<span class=\"k\">(</span><span class=\"s\">'pundit-login-modal'</span><span class=\"k\">,</span> <span class=\"s\">'in'</span><span class=\"k\">))</span>","                dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal'</span><span class=\"k\">).</span>modal<span class=\"k\">(</span><span class=\"s\">'show'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">      * @method hideLogin</span>","<span class=\"c\">      * @description Hides the login modal dialog</span>","<span class=\"c\">      */</span>","    hideLogin<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal'</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>dojo<span class=\"k\">.</span>hasClass<span class=\"k\">(</span><span class=\"s\">'pundit-login-modal'</span><span class=\"k\">,</span> <span class=\"s\">'in'</span><span class=\"k\">))</span>","                dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal'</span><span class=\"k\">).</span>modal<span class=\"k\">(</span><span class=\"s\">'hide'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Automatically called when the login happens</span>","    _afterLogin<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        self<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"Logged in as: \"</span> <span class=\"k\">+</span> data<span class=\"k\">.</span>fullName<span class=\"k\">+</span><span class=\"s\">\" (\"</span><span class=\"k\">+</span>data<span class=\"k\">.</span>email<span class=\"k\">+</span><span class=\"s\">\")\"</span><span class=\"k\">);</span>","        ","        self<span class=\"k\">.</span>_loggedIn <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        self<span class=\"k\">.</span>_loggedInAs <span class=\"k\">=</span> data<span class=\"k\">;</span>","        ","        <span class=\"c\">// Modify the modal: we are logged in</span>","        self<span class=\"k\">.</span>_setLoginState<span class=\"k\">(</span><span class=\"s\">'logged'</span><span class=\"k\">);</span>","        dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal .modal-body span.username'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>html<span class=\"k\">(</span>data<span class=\"k\">.</span>fullName<span class=\"k\">+</span><span class=\"s\">\" (\"</span><span class=\"k\">+</span>data<span class=\"k\">.</span>email<span class=\"k\">+</span><span class=\"s\">\")\"</span><span class=\"k\">);</span>","            ","        <span class=\"c\">// exectue any pending blocked requests: get the stub</span>","        <span class=\"c\">// object out and do a new call at that url</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> self<span class=\"k\">.</span>blockedRequests<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">--;)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> foo <span class=\"k\">=</span> self<span class=\"k\">.</span>blockedRequests<span class=\"k\">[</span>i<span class=\"k\">];</span>","            self<span class=\"k\">.</span>get<span class=\"k\">(</span>foo<span class=\"k\">.</span>url<span class=\"k\">,</span> foo<span class=\"k\">.</span>params<span class=\"k\">)</span>","                <span class=\"k\">.</span>then<span class=\"k\">(</span>foo<span class=\"k\">.</span>ref<span class=\"k\">.</span>orig_then<span class=\"k\">,</span> foo<span class=\"k\">.</span>ref<span class=\"k\">.</span>orig_error<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      ","        <span class=\"c\">// Hide the modal, if open</span>","        setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> ","            self<span class=\"k\">.</span>hideLogin<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> self<span class=\"k\">.</span>opts<span class=\"k\">.</span>loginAutomaticHideMS<span class=\"k\">);</span>","","        self<span class=\"k\">.</span>fireOnLogin<span class=\"k\">(</span>data<span class=\"k\">);</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">// Automatically called when the logout happens</span>","    _afterLogout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        self<span class=\"k\">.</span>_loggedIn <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        self<span class=\"k\">.</span>_loggedInAs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","        dojo<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"s\">'#pundit-login-modal .modal-body span.username'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>html<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            ","        self<span class=\"k\">.</span>_setLoginState<span class=\"k\">(</span><span class=\"s\">'off'</span><span class=\"k\">);</span>","        self<span class=\"k\">.</span>fireOnLogout<span class=\"k\">(</span>data<span class=\"k\">);</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _setWrappingCallParams<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>originalCallParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","            wrappedParams <span class=\"k\">=</span> <span class=\"k\">{</span>","                <span class=\"s\">'withCredentials'</span><span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            key<span class=\"k\">;</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> originalCallParams<span class=\"k\">)</span> ","            <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">!==</span> <span class=\"s\">\"load\"</span><span class=\"k\">)</span> ","                wrappedParams<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> originalCallParams<span class=\"k\">[</span>key<span class=\"k\">];</span>","            <span class=\"k\">else</span> ","                wrappedParams<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>r<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>r <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>r<span class=\"k\">.</span>redirectTo<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        self<span class=\"k\">.</span>blockedRequests<span class=\"k\">.</span>push<span class=\"k\">(</span>wrappedParams<span class=\"k\">);</span>","                        self<span class=\"k\">.</span>redirectURL <span class=\"k\">=</span> r<span class=\"k\">.</span>redirectTo<span class=\"k\">;</span>","                        self<span class=\"k\">.</span>showLogin<span class=\"k\">();</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> ","                        originalCallParams<span class=\"k\">.</span>load<span class=\"k\">(</span>r<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","        <span class=\"k\">return</span> wrappedParams<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['AuthenticatedRequester.js'][10]++;
define(["dojo/on", "dojo/_base/declare", "dojo/parser", "dojo/request/xhr", "pundit/BaseComponent", "bootstrap/Modal", "dojo/text!pundit/tmpl/PunditLoginModalTemplate.html", "dijit/_WidgetBase", "dijit/_TemplatedMixin"], (function (on, declare, parser, xhr, BaseComponent, BModal, LoginModalTemplate, _WidgetBase, _TemplatedMixin) {
  _$jscoverage['AuthenticatedRequester.js'][34]++;
  return declare("pundit.AuthenticatedRequester", [BaseComponent, _WidgetBase, _TemplatedMixin], {templateString: LoginModalTemplate, redirectURL: "http://metasound.dibet.univpm.it/annotationserver/login.jsp", _loggedIn: false, _logginInAs: {}, HTTP_ERROR_FORBIDDEN: 403, HTTP_CONNECTION_ERROR: 0, opts: {loginTimerMS: 500, loginAutomaticHideMS: 2000}, blockedRequests: [], constructor: (function (options) {
  _$jscoverage['AuthenticatedRequester.js'][66]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][68]++;
  self.inherited(arguments);
  _$jscoverage['AuthenticatedRequester.js'][84]++;
  self.createCallback(["login", "logout"]);
  _$jscoverage['AuthenticatedRequester.js'][86]++;
  self.log("Authenticated requests component up and running!");
}), startup: (function () {
  _$jscoverage['AuthenticatedRequester.js'][91]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][92]++;
  self._initLoginDialog();
  _$jscoverage['AuthenticatedRequester.js'][93]++;
  self.log("Startup done");
}), get: (function (url, callParams) {
  _$jscoverage['AuthenticatedRequester.js'][109]++;
  var self = this, foo = xhr.get(url, self._setWrappingCallParams(callParams)), ref = {};
  _$jscoverage['AuthenticatedRequester.js'][115]++;
  ref.then = (function (f, e, x) {
  _$jscoverage['AuthenticatedRequester.js'][116]++;
  this.orig_then = f;
  _$jscoverage['AuthenticatedRequester.js'][117]++;
  this.orig_error = e;
  _$jscoverage['AuthenticatedRequester.js'][118]++;
  return this;
});
  _$jscoverage['AuthenticatedRequester.js'][129]++;
  foo.then((function (r) {
  _$jscoverage['AuthenticatedRequester.js'][130]++;
  if ((r && ((typeof r.redirectTo) !== "undefined"))) {
    _$jscoverage['AuthenticatedRequester.js'][134]++;
    self.blockedRequests.push({ref: ref, url: url, params: callParams});
    _$jscoverage['AuthenticatedRequester.js'][139]++;
    self.redirectURL = r.redirectTo;
    _$jscoverage['AuthenticatedRequester.js'][140]++;
    self.showLogin();
  }
  else {
    _$jscoverage['AuthenticatedRequester.js'][143]++;
    ref.orig_then(r);
  }
}), (function (r, e, x) {
  _$jscoverage['AuthenticatedRequester.js'][147]++;
  if (((typeof ref.orig_error) === "function")) {
    _$jscoverage['AuthenticatedRequester.js'][148]++;
    ref.orig_error(r, e, x);
  }
}));
  _$jscoverage['AuthenticatedRequester.js'][151]++;
  return ref;
}), _oldGet: (function (args) {
  _$jscoverage['AuthenticatedRequester.js'][155]++;
  return this.get(args.url, this._setWrappingCallParams(args)).then(args.load, args.error);
}), xPost: (function (callParams) {
  _$jscoverage['AuthenticatedRequester.js'][167]++;
  dojo.xhrPost(this._setWrappingCallParams(callParams));
}), xPut: (function (callParams) {
  _$jscoverage['AuthenticatedRequester.js'][177]++;
  dojo.xhrPut(this._setWrappingCallParams(callParams));
}), xDelete: (function (callParams) {
  _$jscoverage['AuthenticatedRequester.js'][187]++;
  dojo.xhrDelete(this._setWrappingCallParams(callParams));
}), _initLoginDialog: (function () {
  _$jscoverage['AuthenticatedRequester.js'][191]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][193]++;
  self._setLoginState("off");
  _$jscoverage['AuthenticatedRequester.js'][195]++;
  on(dojo.byId("pundit-login-open-button"), "click", (function () {
  _$jscoverage['AuthenticatedRequester.js'][196]++;
  self.log("Opening the login dialog");
  _$jscoverage['AuthenticatedRequester.js'][197]++;
  self._openLoginPopUp();
}));
  _$jscoverage['AuthenticatedRequester.js'][200]++;
  on(dojo.byId("pundit-login-open-button-again"), "click", (function () {
  _$jscoverage['AuthenticatedRequester.js'][201]++;
  self.log("Opening the login dialog");
  _$jscoverage['AuthenticatedRequester.js'][202]++;
  self._openLoginPopUp();
}));
  _$jscoverage['AuthenticatedRequester.js'][205]++;
  on(dojo.byId("pundit-login-close-button"), "click", (function () {
  _$jscoverage['AuthenticatedRequester.js'][206]++;
  self.log("Closing the login dialog");
  _$jscoverage['AuthenticatedRequester.js'][207]++;
  self.hideLogin();
  _$jscoverage['AuthenticatedRequester.js'][208]++;
  clearTimeout(self.loginTimer);
}));
  _$jscoverage['AuthenticatedRequester.js'][212]++;
  on(dojo.byId("pundit-login-modal"), "hidden", (function () {
  _$jscoverage['AuthenticatedRequester.js'][213]++;
  clearTimeout(self.loginTimer);
}));
}), _openLoginPopUp: (function () {
  _$jscoverage['AuthenticatedRequester.js'][219]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][221]++;
  window.open(self.redirectURL, "loginpopup", "left=260,top=120,width=480,height=360");
  _$jscoverage['AuthenticatedRequester.js'][223]++;
  self._setLoginState("waiting");
  _$jscoverage['AuthenticatedRequester.js'][225]++;
  clearTimeout(self.loginTimer);
  _$jscoverage['AuthenticatedRequester.js'][226]++;
  self._checkLogin();
}), _setLoginState: (function (s) {
  _$jscoverage['AuthenticatedRequester.js'][230]++;
  dojo.query("#pundit-login-modal").removeClass("pundit-login-state-off pundit-login-state-waiting pundit-login-state-logged").addClass(("pundit-login-state-" + s));
}), _checkLogin: (function () {
  _$jscoverage['AuthenticatedRequester.js'][236]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][238]++;
  clearTimeout(self.loginTimer);
  _$jscoverage['AuthenticatedRequester.js'][239]++;
  self.loginTimer = setTimeout((function () {
  _$jscoverage['AuthenticatedRequester.js'][240]++;
  self.log("Not logged in.");
  _$jscoverage['AuthenticatedRequester.js'][241]++;
  self.isLoggedIn((function (b) {
  _$jscoverage['AuthenticatedRequester.js'][242]++;
  if ((! b)) {
    _$jscoverage['AuthenticatedRequester.js'][242]++;
    self._checkLogin();
  }
}));
}), self.opts.loginTimerMS);
}), isLoggedIn: (function (f) {
  _$jscoverage['AuthenticatedRequester.js'][255]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][257]++;
  var args = {url: "http://metasound.dibet.univpm.it/annotationserver/api/users/current", handleAs: "json", headers: {"Accept": "application/json"}, load: (function (data) {
  _$jscoverage['AuthenticatedRequester.js'][264]++;
  return self._handleLoginLoad(data, f);
}), error: (function (error) {
  _$jscoverage['AuthenticatedRequester.js'][267]++;
  return self._handleLoginError(error, f);
})};
  _$jscoverage['AuthenticatedRequester.js'][271]++;
  self._oldGet(args);
}), _handleLoginError: (function (error, f) {
  _$jscoverage['AuthenticatedRequester.js'][275]++;
  console.log("si ma, ara che error .....", error);
  _$jscoverage['AuthenticatedRequester.js'][276]++;
  if (((typeof f) === "function")) {
    _$jscoverage['AuthenticatedRequester.js'][276]++;
    f(false, error);
  }
  _$jscoverage['AuthenticatedRequester.js'][277]++;
  return false;
}), _handleLoginLoad: (function (data, f) {
  _$jscoverage['AuthenticatedRequester.js'][281]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][284]++;
  if ((((typeof data) === "undefined") || ((typeof data.loginStatus) === "undefined"))) {
    _$jscoverage['AuthenticatedRequester.js'][285]++;
    data = {loginStatus: 0};
  }
  else {
    _$jscoverage['AuthenticatedRequester.js'][288]++;
    if (((typeof data.loginServer) !== "undefined")) {
      _$jscoverage['AuthenticatedRequester.js'][289]++;
      self.redirectURL = data.loginServer;
    }
  }
  _$jscoverage['AuthenticatedRequester.js'][293]++;
  if ((data.loginStatus === 1)) {
    _$jscoverage['AuthenticatedRequester.js'][294]++;
    if ((self._loggedIn === false)) {
      _$jscoverage['AuthenticatedRequester.js'][294]++;
      self._afterLogin(data);
    }
    _$jscoverage['AuthenticatedRequester.js'][295]++;
    if (((typeof f) === "function")) {
      _$jscoverage['AuthenticatedRequester.js'][295]++;
      f(true, data);
    }
  }
  else {
    _$jscoverage['AuthenticatedRequester.js'][297]++;
    if ((self._loggedIn === true)) {
      _$jscoverage['AuthenticatedRequester.js'][297]++;
      self._afterLogout();
    }
    _$jscoverage['AuthenticatedRequester.js'][298]++;
    if (((typeof f) === "function")) {
      _$jscoverage['AuthenticatedRequester.js'][298]++;
      f(false, data);
    }
  }
  _$jscoverage['AuthenticatedRequester.js'][300]++;
  return false;
}), login: (function () {
  _$jscoverage['AuthenticatedRequester.js'][310]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][313]++;
  self.isLoggedIn((function (b) {
  _$jscoverage['AuthenticatedRequester.js'][314]++;
  if (b) {
    _$jscoverage['AuthenticatedRequester.js'][314]++;
    return;
  }
  _$jscoverage['AuthenticatedRequester.js'][315]++;
  self.log("Login() opening the login window");
  _$jscoverage['AuthenticatedRequester.js'][316]++;
  self._setLoginState("off");
  _$jscoverage['AuthenticatedRequester.js'][317]++;
  self.showLogin();
}));
}), logout: (function (f) {
  _$jscoverage['AuthenticatedRequester.js'][328]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][330]++;
  clearTimeout(self.loginTimer);
  _$jscoverage['AuthenticatedRequester.js'][332]++;
  var args = {url: "http://metasound.dibet.univpm.it/annotationserver/api/users/logout", handleAs: "json", headers: {"Accept": "application/json"}, load: (function (data) {
  _$jscoverage['AuthenticatedRequester.js'][339]++;
  var msg;
  _$jscoverage['AuthenticatedRequester.js'][340]++;
  if ((((typeof data) !== "undefined") && ((typeof data.logout) !== "undefined"))) {
    _$jscoverage['AuthenticatedRequester.js'][341]++;
    data.msg = ((data.logout == 1)? "Logged out succesfully": "You werent logged in.. and you still arent.");
    _$jscoverage['AuthenticatedRequester.js'][343]++;
    if (((typeof f) === "function")) {
      _$jscoverage['AuthenticatedRequester.js'][343]++;
      f(data);
    }
    _$jscoverage['AuthenticatedRequester.js'][344]++;
    if ((self._loggedIn === true)) {
      _$jscoverage['AuthenticatedRequester.js'][344]++;
      self._afterLogout(data);
    }
  }
}), error: (function (error) {
})};
  _$jscoverage['AuthenticatedRequester.js'][350]++;
  self._oldGet(args);
}), showLogin: (function () {
  _$jscoverage['AuthenticatedRequester.js'][358]++;
  if ((dojo.query("#pundit-login-modal").length > 0)) {
    _$jscoverage['AuthenticatedRequester.js'][359]++;
    if ((! dojo.hasClass("pundit-login-modal", "in"))) {
      _$jscoverage['AuthenticatedRequester.js'][360]++;
      dojo.query("#pundit-login-modal").modal("show");
    }
  }
}), hideLogin: (function () {
  _$jscoverage['AuthenticatedRequester.js'][368]++;
  if ((dojo.query("#pundit-login-modal").length > 0)) {
    _$jscoverage['AuthenticatedRequester.js'][369]++;
    if (dojo.hasClass("pundit-login-modal", "in")) {
      _$jscoverage['AuthenticatedRequester.js'][370]++;
      dojo.query("#pundit-login-modal").modal("hide");
    }
  }
}), _afterLogin: (function (data) {
  _$jscoverage['AuthenticatedRequester.js'][375]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][377]++;
  self.log(("Logged in as: " + data.fullName + " (" + data.email + ")"));
  _$jscoverage['AuthenticatedRequester.js'][379]++;
  self._loggedIn = true;
  _$jscoverage['AuthenticatedRequester.js'][380]++;
  self._loggedInAs = data;
  _$jscoverage['AuthenticatedRequester.js'][383]++;
  self._setLoginState("logged");
  _$jscoverage['AuthenticatedRequester.js'][384]++;
  dojo.query("#pundit-login-modal .modal-body span.username").html((data.fullName + " (" + data.email + ")"));
  _$jscoverage['AuthenticatedRequester.js'][389]++;
  for (var i = self.blockedRequests.length; (i--);) {
    _$jscoverage['AuthenticatedRequester.js'][390]++;
    var foo = self.blockedRequests[i];
    _$jscoverage['AuthenticatedRequester.js'][391]++;
    self.get(foo.url, foo.params).then(foo.ref.orig_then, foo.ref.orig_error);
}
  _$jscoverage['AuthenticatedRequester.js'][396]++;
  setTimeout((function () {
  _$jscoverage['AuthenticatedRequester.js'][397]++;
  self.hideLogin();
}), self.opts.loginAutomaticHideMS);
  _$jscoverage['AuthenticatedRequester.js'][400]++;
  self.fireOnLogin(data);
}), _afterLogout: (function (data) {
  _$jscoverage['AuthenticatedRequester.js'][406]++;
  var self = this;
  _$jscoverage['AuthenticatedRequester.js'][408]++;
  self._loggedIn = false;
  _$jscoverage['AuthenticatedRequester.js'][409]++;
  self._loggedInAs = {};
  _$jscoverage['AuthenticatedRequester.js'][411]++;
  dojo.query("#pundit-login-modal .modal-body span.username").html("");
  _$jscoverage['AuthenticatedRequester.js'][414]++;
  self._setLoginState("off");
  _$jscoverage['AuthenticatedRequester.js'][415]++;
  self.fireOnLogout(data);
}), _setWrappingCallParams: (function (originalCallParams) {
  _$jscoverage['AuthenticatedRequester.js'][420]++;
  var self = this, wrappedParams = {"withCredentials": true}, key;
  _$jscoverage['AuthenticatedRequester.js'][426]++;
  for (key in originalCallParams) {
    _$jscoverage['AuthenticatedRequester.js'][427]++;
    if ((key !== "load")) {
      _$jscoverage['AuthenticatedRequester.js'][428]++;
      wrappedParams[key] = originalCallParams[key];
    }
    else {
      _$jscoverage['AuthenticatedRequester.js'][430]++;
      wrappedParams[key] = (function (r) {
  _$jscoverage['AuthenticatedRequester.js'][431]++;
  if ((r && ((typeof r.redirectTo) !== "undefined"))) {
    _$jscoverage['AuthenticatedRequester.js'][432]++;
    self.blockedRequests.push(wrappedParams);
    _$jscoverage['AuthenticatedRequester.js'][433]++;
    self.redirectURL = r.redirectTo;
    _$jscoverage['AuthenticatedRequester.js'][434]++;
    self.showLogin();
  }
  else {
    _$jscoverage['AuthenticatedRequester.js'][436]++;
    originalCallParams.load(r);
  }
});
    }
}
  _$jscoverage['AuthenticatedRequester.js'][439]++;
  return wrappedParams;
})});
}));
